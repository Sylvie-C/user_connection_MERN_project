openapi: 3.0.3
info:
  title: User API documentation - Swagger OpenAPI 3.0
  description: |-
    API for User Signup / Login
  version: 1.0.0
servers:
  - url: http://localhost:5050/api/user
tags:
  - name: User
    description: Operations about user
    
paths:
  /signup:
    post:
      tags:
        - User
      summary: Create user
      description: User subscription with required email & password
      operationId: create
      requestBody:
        description: "At least email & password, username not required"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_signup'
      responses:
        "201": 
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: hexadecimal
                    description: unique identifier (mongodb 'ObjectId' type)
                    example: "507f1f77bcf86cd799439011"
                  username: 
                    type: string
                  email: 
                    type: string
                  password:
                    type: string
                    description: hashed password
                  date: 
                    format: date
                    description: date of registration
                    example: 2024-07-25T13:36:52.124+00:00
        "400": 
          description: An account already exists with this email
        "500": 
          description: Internal Server Error
          
  /login: 
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_login'
      responses:
        "200" : 
          description: "{ status: 200 , response : { email: , userName: , token: } }"
          content:
            application/json: 
              schema: 
                type: object
                properties:
                  status: 
                    type: integer
                  response: 
                    type: object
                    properties: 
                      email: 
                        type: string
                      username: 
                        type: string
                      token: 
                        type: string
        '404':
          description: "User not registered"
        '401': 
          description: "Unauthorized (wrong password)"
        '500': 
          description: "Internal Server Error"
  
  /update/username: 
    patch:
      tags: 
        - User
      summary: Update username
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username_update'

      responses: 
        "200" : 
          description: "Username updated successfully"
          content: 
            application/json: 
              schema: 
                type: object
                properties: 
                  status: 
                    type: integer
                  response: 
                    type: object
                    description: "Returned object after update in db"
                    example: { message: "Username updated successfully" , response: "newUsername"}

        "404" : 
          description: "User not registered"
        "403" : 
          description: "Invalid token for this user"
        "401" : 
          description: "Unauthorized : Wrong password"
        "500" : 
          description: "Internal Server error"
  
components:
  schemas:
    User: 
      description: "User object in database"
      type: object
      properties: 
        _id: 
          type: object
        username: 
          type: string
        email: 
          type: string
        password: 
          type: string
        date: 
          type: object
    
    User_signup:
      description: "User object to submit to subscribe"
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required: 
        - email
        - password
    
    User_login: 
      description: "User object to submit to log in"
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: 
        - email
        - password

    Username_update: 
      description: "User object to submit to update username in database"
      type: object
      properties: 
        email:
          type: string
        password:
          type: string
        token: 
          type: string
        username: 
          type: string
          description: "New Username to be saved in database"
      required: 
        - email
        - password
        - token
        - username

  requestBodies:
    User_signup: 
      description: "User object to submit for signup"
      content: 
        application/json: 
          schema: 
            $ref: "#/components/schemas/User_signup"
    User_login:
      description: "User object to submit for login"
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/User_login'
    Username_update: 
      description: "User object to submit for username update"
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/Username_update'
            
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT

security: 
  - bearerAuth: []