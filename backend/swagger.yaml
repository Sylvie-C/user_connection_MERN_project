openapi: 3.0.3
info:
  title: User API documentation - Swagger OpenAPI 3.0
  description: |-
    API for User Signup / Login
  version: 1.0.0
servers:
  - url: http://localhost:5050/api/user
tags:
  - name: User
    description: Operations about user
    
paths:
  /signup:
    post:
      tags:
        - User
      summary: Create user
      description: User subscription with required email & password
      operationId: create
      requestBody:
        description: At least email & password, username not required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201": 
          description: User successfully registered
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: hexadecimal
                    description: unique identifier (mongodb 'ObjectId' type)
                    example: "507f1f77bcf86cd799439011"
                  username: 
                    type: string
                  email: 
                    type: string
                  password:
                    type: string
                    description: hashed password
                  date: 
                    format: date
                    description: date of registration
                    example: 2024-07-25T13:36:52.124+00:00
        "400": 
          description: An account already exists with this email
        "500": 
          description: Internal Server Error
          
  /login: 
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_login'
      responses:
        default: 
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: 
                    type: string
                    example: 66a254f4e08ab91c... 
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ... 
        '404':
          description: User not found
        '401': 
          description: Unauthorized
        '500': 
          description: Internal Server Error
        
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required: 
        - email
        - password
    User_login: 
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: 
        - email
        - password
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  requestBodies:
    User:
      description: User object to be added to database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    User_login:
      description: User object to submit for login
      content: 
        application/json: 
          schema: 
            $ref: '#/components/schemas/User_login'
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT

security: 
  - bearerAuth: []